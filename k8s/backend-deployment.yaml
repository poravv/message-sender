apiVersion: apps/v1
kind: Deployment
metadata:
  name: sender-backend
  namespace: sender
  labels:
    app: sender-backend
    tier: backend
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: sender-backend
      tier: backend
  template:
    metadata:
      labels:
        app: sender-backend
        tier: backend
    spec:
      terminationGracePeriodSeconds: 90
      containers:
      - name: sender-backend
        image: ghcr.io/poravv/message-sender:latest   # ðŸ‘‰ siempre la Ãºltima
        imagePullPolicy: Always                      # ðŸ‘‰ fuerza pull en cada arranque
        ports:
        - containerPort: 3010
          name: http
        env:
        - name: PORT
          value: "3010"
        - name: NODE_OPTIONS
          value: "--max_old_space_size=3072"
        - name: POD_ID
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        envFrom:
        - configMapRef:
            name: backend-config
        - secretRef:
            name: backend-env-secrets
        resources:
          requests:
            memory: "1536Mi"
            cpu: "500m"
            ephemeral-storage: "2Gi"
          limits:
            memory: "4Gi"
            cpu: "1000m"
            ephemeral-storage: "4Gi"
        livenessProbe:
          httpGet:
            path: /health
            port: 3010
          initialDelaySeconds: 45
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 3010
          initialDelaySeconds: 25
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 8
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh","-c","sleep 15"]
      imagePullSecrets:
      - name: ghcr-secret     # ðŸ‘‰ asegura acceso a GHCR tras reinicios
---
apiVersion: v1
kind: Service
metadata:
  name: sender-backend-service
  namespace: sender
  labels:
    app: sender-backend
    tier: backend
spec:
  type: ClusterIP            # ðŸ‘‰ acceso interno, el Ingress expone pÃºblicamente
  selector:
    app: sender-backend
    tier: backend
  ports:
  - port: 80                 # ðŸ‘‰ puerto expuesto hacia el Ingress
    targetPort: 3010         # ðŸ‘‰ apunta al contenedor
    name: http
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sender-backend-hpa
  namespace: sender
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sender-backend
  minReplicas: 1
  maxReplicas: 3
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 120
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      selectPolicy: Max
    scaleDown:
      stabilizationWindowSeconds: 600
      policies:
      - type: Percent
        value: 30
        periodSeconds: 60
      selectPolicy: Max
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 90
        # subir a 95% para permitir mÃ¡s uso antes de escalar
        # (ajuste aplicado arriba)
